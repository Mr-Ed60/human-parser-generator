(* HPG Grammar for Mini Java *)
(* https://github.com/christophevg/human-parser-generator/wiki/Tutorial-MiniJava *)

program                  = main-class { class-declaration } ;

main-class               = "class" class-name @ identifier "{"
                             "public" "static" "void" "main" "(" "String" "[" "]" args @ identifier ")" "{"
                               statement
                             "}"
                           "}" ;

class-declaration        = "class" class-name @ identifier [ "extends" extends @ identifier ] "{"
                             { var-declaration }
                             { method-declaration }
                           "}" ;

var-declaration          = type identifier ";" ;

method-declaration       = "public" return-type @ type method-name @ identifier
                           "(" [ type identifier { "," type identifier } ] ")" "{"
                             { var-declaration }
                             { statement }
                             "return" returns @ expression ";"
                           "}" ;

type                     = primitive-type
                         | list-type
                         | complex-type
                         ;

primitive-type           = integer-type
                         | boolean-type
                         ;

integer-type             = "int" ;
boolean-type             = "boolean" ;

list-type                = integer-type "[" "]";

complex-type             = type @ identifier ;

statement                = block-statement
                         | if-statement
                         | while-statement
                         | print-statement
                         | assignment-statement
                         ;

block-statement          = "{" { statement } "}" ;
if-statement             = "if" "(" condition @ expression ")"
                             true-statement @ statement
                           "else"
                             false-statement @ statement
                         ;
while-statement          = "while" "(" expression ")" statement ;
print-statement          = "System.out.print" [ "ln" ] "(" expression ")" ";" ;
assignment-statement     = variable @ identifier [ "[" index @ expression "]" ]
                           "=" expression ";"
                         ;

expression               = postfix-expression
                         | non-postfix-expression
                         ;

postfix-expression       = indexed-expression
                         | method-call-expression
                         | length-expression
                         ;

indexed-expression       = object @ non-postfix-expression "[" expression "]" ;
method-call-expression   = object @ non-postfix-expression "." identifier
                           "(" [ argument @ expression { "," argument @ expression } ] ")" ;
length-expression        = object @ non-postfix-expression "." "length" ;

non-postfix-expression   = prefix-expression
                         | non-prefix-expression
                         ;

prefix-expression        = not-expression ;

not-expression           = "!" prefix-expression ;

non-prefix-expression    = times-expression
                         | non-times-expression
                         ;

times-expression         = lhs @ non-times-expression "*" rhs @ non-prefix-expression ;

non-times-expression     = additive-expression
                         | non-additive-expression
                         ;

additive-expression      = lhs @ non-additive-expression ( "+" | "-" ) rhs @ non-times-expression ;

non-additive-expression  = less-than-expression 
                         | non-less-than-expression
                         ;

less-than-expression     = lhs @ non-less-than-expression "<" rhs @ non-additive-expression ;

non-less-than-expression = and-expression 
                         | non-and-expression
                         ;
                         
and-expression           = lhs @ non-and-expression "&&" rhs @ non-less-than-expression ;

non-and-expression       = group-expression
                         | primary-expression
                         ;

group-expression         = "(" expression ")" ;

primary-expression       = integer-expression
                         | boolean-expression
                         | this-expression
                         | constructor-expression
                         | identifier-expression
                         ;

integer-expression       = value @ integer ;
boolean-expression       = value @ boolean ;
this-expression          = "this" ;
constructor-expression   = "new" "int" "[" size @ expression "]"
                         | "new" class-name @ identifier "(" ")"
                         ;
identifier-expression    = name @ identifier ;

identifier               = ? /([A-Za-z_][A-Za-z0-9_]*)/ ? ;
integer                  = ? /(-?[1-9][0-9]*)/ ? ;
boolean                  = ? /(true|false)/ ? ;
