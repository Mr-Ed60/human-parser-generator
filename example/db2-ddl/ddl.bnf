(* DB2 DDL gammar for Human Parser Generator                            *)
(* https://github.com/christophevg/human-parser-generator               *)
(* author: Christophe VG <contact@christophe.vg>                        *)
(* This grammar is not based on an official grammar!                    *)
(* It has been assembled to be able to parse a given set of DDL files.  *)

ddl                         ::= { statement } ;

statement                   ::= comment
                              | create-statement
                              | set-statement
                              | alter-statement
                              ;

comment                     ::= message @ ? /--([^\n]*)/ ? ;

(* CREATE ... *)

create-statement            ::= "CREATE" 
                                ( create-database-statement
                                | create-tablespace-statement
                                | create-table-statement
                                | create-index-statement
                                | create-view-statement
                                )
                                ";"
                              ;

create-database-statement   ::= ( _ @ "DATABASE" | _ @ "DB" ) name @ fqn
                                { option @ database-option }
                              ;

create-tablespace-statement ::= "TABLESPACE" name @ fqn
                                "IN" database @ fqn
                                { option @ tablespace-option }
                              ;

create-table-statement     ::= "TABLE" name @ fqn "(" element { "," element } ")"
                              "IN" database @ fqn
                              { option @ table-option }
                            ;

element                    ::= constraint-definition | column-definition ;

create-index-statement     ::= [ is-unique @ "UNIQUE" ] "INDEX" name @ fqn "ON" table @ fqn
                               "(" index-column { "," index-column } ")"
                               { option @ index-option }
                             ;

index-column               ::= column @ identifier order @ ? /(ASC|DESC)/ ? ;

create-view-statement      ::= "VIEW" name @ fqn "AS" definition @ raw-ddl;

constraint-definition      ::= "CONSTRAINT" name @ identifier constraint ;

constraint                 ::= primary-key-constraint
                             | foreign-key-constraint
                             | check-constraint
                             ;

primary-key-constraint     ::= "PRIMARY" "KEY" "(" column @ identifier { "," column @ identifier } ")" ;

foreign-key-constraint     ::= "FOREIGN" "KEY" "(" key @ identifier { "," key @ identifier } ")"
                               "REFERENCES" table @ fqn
                               "(" reference @ identifier { "," reference @ identifier } ")"
                               { option @ foreign-key-option }
                             ;

(* TODO convert to actual parsing logic in stead of grab-all *)
check-constraint           ::= "CHECK" "(" rule ")";
rule                       ::= ? /([^\)]*?)(?<keep>\))/ ? ;

column-definition          ::= name @ fqn data-type { column-config } ;

data-type                  ::= type @ identifier
                               [ "(" length @ number [ "," decimal-length @ number ] ")" ]
                             ;

column-config              ::= constraint-definition | column-option ;

column-option              ::= not-null @ "NOT NULL"
                             | "FOR" for @ identifier _ @ "DATA"
                             | "WITH DEFAULT" [ default-value @ literal ]
                             ;

(* SET ... *)

set-statement              ::= "SET" set-option "=" value @ raw-ddl ";" ;

set-option                 ::= "CURRENT PATH" ;

(* ALTER ... *)

alter-statement            ::= "ALTER" alter-table ";" ;

alter-table                ::= "TABLE" name @ fqn add-statement ;

add-statement              ::= "ADD" { constraint-definition } ;

(* general purpose rules *)

literal                    ::= string | number ;

(* TODO split out into different option sets *)

database-option            ::= buffer-pool-option
                             | indexbp-option
                             | sto-group-option
                             | ccsid-option
                             ;

tablespace-option          ::= sto-group-option
                             | pri-qty-option
                             | sec-qty-option
                             | erase-option
                             | free-page-option
                             | pct-free-option
                             | gbp-cache-option
                             |  compress-option
                             | track-mod-option
                             |  logged-option
                             | ds-size-option
                             | seg-size-option
                             | max-partitions-option
                             | buffer-pool-option
                             | lock-size-option
                             | lock-max-option
                             | close-option
                             | ccsid-option
                             | max-rows-option
                             ;

table-option               ::= data-capture-option
                             | ccsid-option
                             | volatile-option
                             | append-option
                             ;

index-option               ::= sto-group-option
                             | pri-qty-option
                             | sec-qty-option
                             | erase-option
                             | free-page-option
                             | pct-free-option
                             | gbp-cache-option
                             | cluster-option
                             | buffer-pool-option
                             | close-option
                             | copy-option
                             | piece-size-option
                             | compress-option
                             | include-option
                             ;

foreign-key-option         ::= on-delete-option
                             | enforced-option
                             ;

append-option              ::= "APPEND" append @ boolean ;
buffer-pool-option         ::= "BUFFERPOOL" bufferpool @ identifier ;
ccsid-option               ::= "CCSID" ccsid @ identifier ;
close-option               ::= "CLOSE" close @ boolean ;
cluster-option             ::= [ "NOT" ] "CLUSTER" ;
copy-option                ::= "COPY" copy @ boolean ;
compress-option            ::= "COMPRESS" compress @ boolean ;
data-capture-option        ::= "DATA CAPTURE" data-capture @ identifier ;
ds-size-option             ::= "DSSIZE" dssize @ number _ @ "G" ;
enforced-option            ::= "ENFORCED" ;
erase-option               ::= "ERASE" erase @ boolean ;
free-page-option           ::= "FREEPAGE" freepage @ number ;
gbp-cache-option           ::= "GBPCACHE" gbpcache @ identifier ;
include-option             ::= "INCLUDE" "(" column @ identifier ")" ;
indexbp-option             ::= "INDEXBP" index @ identifier;
lock-max-option            ::= "LOCKMAX" lockmax @ identifier ;
lock-size-option           ::= "LOCKSIZE" locksize @ identifier ;
logged-option              ::= "LOGGED" ;
max-partitions-option      ::= "MAXPARTITIONS" maxpartitions @ number ;
max-rows-option            ::= "MAXROWS" maxrows @ number ;
on-delete-option           ::= "ON DELETE" ( "RESTRICT" | "SET NULL" ) ;
pct-free-option            ::= "PCTFREE" pctfree @ number ;
piece-size-option          ::= "PIECESIZE" size @ number "G" ;
pri-qty-option             ::= "PRIQTY" pri-qty @ number ;
sec-qty-option             ::= "SECQTY" sec-qty @ number ;
seg-size-option            ::= "SEGSIZE" segsize @ number ;
sto-group-option           ::= [ _ @ "USING" ] "STOGROUP" sto-group @ identifier ;
track-mod-option           ::= "TRACKMOD" trackmod @ boolean ;
volatile-option            ::= [ "NOT" ] "VOLATILE" ;

fqn                        ::= [ scope @ identifier _ @ "." ] name @ identifier ;

identifier                 ::= name  @ ? /([\w]+)/ ? ;
number                     ::= value @ ? /([0-9\\.]+)/ ? ;
string                     ::= text  @ ? /"([^"]*)"|^'([^']*)'/ ? ;
boolean                    ::= value @ ? /(YES|yes|TRUE|True|true|NO|no|FALSE|False|false)/ ? ;

raw-ddl                    ::= ? /([^;]*)/ ? ;
