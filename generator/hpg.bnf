grammar                     ::= { rule } ;

rule                        ::= identifier ( _ @ "::=" | _ @ "=" ) expression ";" ;

expression                  ::= alternatives-expression
                              | non-alternatives-expression
                              ;

alternatives-expression     ::= non-alternatives-expression "|" expression ;

non-alternatives-expression ::= sequential-expression
                              | atomic-expression
                              ; 

sequential-expression       ::= atomic-expression [ _ @ "," ] non-alternatives-expression ;


atomic-expression           ::= nested-expression
                              | terminal-expression
                              ;

nested-expression           ::= optional-expression
                              | repetition-expression
                              | group-expression
                              ;

optional-expression         ::= "[" expression "]" ;
repetition-expression       ::= "{" expression "}" ;
group-expression            ::= "(" expression ")" ;

terminal-expression         ::= identifier-expression
                              | string-expression
                              | extractor-expression
                              ;

identifier-expression       ::= [ name ] identifier ;

string-expression           ::= [ name ] string ;

extractor-expression        ::= [ name ] "/" pattern "/" ;

name                        ::= identifier "@" ;

identifier                  ::= /([A-Za-z_][A-Za-z0-9-_]*)/ ;
string                      ::= /"([^"]*)"|^'([^']*)'/ ;
pattern                     ::= /(.*?)(?<keep>/\s*;)/ ;
