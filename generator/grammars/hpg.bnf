grammar                   ::= { rule } ;

rule                      ::= identifier "::=" expression ";" ;

expression                ::= sequential-expression
                            | non-sequential-expression
                            ;

sequential-expression     ::= non-sequential-expression expression ;

non-sequential-expression ::= alternatives-expression
                            | atomic-expression
                            ;

alternatives-expression   ::= atomic-expression "|" non-sequential-expression ;


atomic-expression         ::= nested-expression
                            | terminal-expression
                            ;

nested-expression         ::= optional-expression
                            | repetition-expression
                            | group-expression
                            ;

optional-expression       ::= "[" expression "]" ;
repetition-expression     ::= "{" expression "}" ;
group-expression          ::= "(" expression ")" ;

terminal-expression       ::= identifier-expression
                            | string-expression
                            | extractor-expression
                            ;

identifier-expression     ::= identifier ;
string-expression         ::= [ identifier "@" ] string;

extractor-expression      ::= [ identifier "@" ] "/" regex "/" ;

identifier                ::= /([A-Za-z][A-Za-z0-9-]*)/ ;
string                    ::= /"([^"]*)"|^'([^']*)'/ ;
regex                     ::= /(.*?)(?<keep>/\s*;)/ ;
