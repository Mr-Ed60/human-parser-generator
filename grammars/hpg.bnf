grammar                 ::= { rule } ;

rule                    ::= identifier "::=" expression-list ";" ;

expression-list         ::= alternatives-expression
                          | sequence-expression
                          ;

alternatives-expression ::= expression "|" expression-list ;
sequence-expression     ::= { expression } ;

expression              ::= string-expression
                          | extractor-expression
                          | optional-expression
                          | repetition-expression
                          | group-expression
                          | or-expression
                          | identifier-expression
                          ;
string-expression       ::= string ;
extractor-expression    ::= "/" regex "/" ;
optional-expression     ::= "[" expression-list "]" ;
repetition-expression   ::= "{" expression-list "}" ;
group-expression        ::= "(" expression-list ")" ;
identifier-expression   ::= identifier ;

identifier              ::= /([A-Za-z][A-Z0-9a-z-]*)/ ;
string                  ::= /"([^"]*)"|^'([^']*)'/ ;
regex                   ::= /([^/]*)/ ;
