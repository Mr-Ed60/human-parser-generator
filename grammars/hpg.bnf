grammar                 ::= { rule } ;

rule                    ::= identifier "::=" expressions ";" ;

expressions             ::= alternative-expressions
                          | sequential-expressions
                          ;

alternative-expressions ::= expression "|" expressions ;
sequential-expressions  ::= { expression } ;

expression              ::= string-expression
                          | extractor-expression
                          | optional-expression
                          | repetition-expression
                          | group-expression
                          | or-expression
                          | identifier-expression
                          ;
string-expression       ::= string ;
extractor-expression    ::= "/" regex "/" ;
optional-expression     ::= "[" expressions "]" ;
repetition-expression   ::= "{" expressions "}" ;
group-expression        ::= "(" expressions ")" ;
identifier-expression   ::= identifier ;

identifier              ::= /([A-Za-z][A-Z0-9a-z-]*)/ ;
string                  ::= /"([^"]*)"|^'([^']*)'/ ;
regex                   ::= /([^/]*)/ ;
